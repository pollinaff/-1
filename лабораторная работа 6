'''
Написать программу в соответствии со своим вариантом задания. Написать 2 варианта формирования (алгоритмический и с помощью функций Питона), сравнив по времени их выполнение.
Вариант 28. Фирма занимается сборкой компьютеров. В компьютере компоненты N типов. 
На складе находятся компоненты разных компаний. Количество компаний К1, К2, … КN. Сформировать все возможные варианты комплектации компьютеров.
(Усложнение: если N кратно 3, то берем только четные в списке магазины.)
'''

import time
import random
from itertools import combinations_with_replacement, product

N = int(input("Количество типов компонентов: "))
max_cost = int(input("Введите максимальную стоимость комплекта: "))

# Функция для формирования комплектов из магазинов
def comb_shops(iterable, r):
    pool = tuple(iterable)
    n = len(pool)
    if not n and r:
        return
    indices = [0] * r
    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i] != n - 1:
                break
        else:
            return
        indices[i:] = [indices[i] + 1] * (r - i)
        yield tuple(pool[i] for i in indices)

# Генерация цен для каждого типа компонента в каждом магазине
prices = [[random.randint(100, 500) for _ in range(N)] for _ in range(N)]

# Функция для расчета стоимости комплекта
def calculate_cost(combination, prices):
    return sum(prices[i][component - 1] for i, component in enumerate(combination))

# Фильтрация комплектов по общей стоимости
def filter_by_max_cost(combinations, prices, max_cost):
    return [combo for combo in combinations if calculate_cost(combo, prices) <= max_cost]

# Алгоритмический подход с усложнением и фильтрацией
start_time = time.time()
shops = list(range(2, N+1, 2)) if N % 3 == 0 else list(range(N))
spisk = list(comb_shops(shops, N))
filtered_spisk = filter_by_max_cost(spisk, prices, max_cost)
end_time = time.time()
print("Алгоритмический подход с усложнением и фильтрацией:", end_time - start_time)

# Функциональный подход с усложнением и фильтрацией
start_time = time.time()
shops = list(range(1, N + 1))
complectacii = list(combinations_with_replacement(shops, N))
filtered_complectacii = filter_by_max_cost(complectacii, prices, max_cost)
end_time = time.time()
print("Функциональный подход с усложнением и фильтрацией:", end_time - start_time)

print("Отфильтрованные комплектации для алгоритмического подхода с максимальной стоимостью", max_cost)
for combo in filtered_spisk:
    print(combo, "Стоимость:", calculate_cost(combo, prices))

# Вывод отфильтрованных комплектаций для функционального подхода
print("\nОтфильтрованные комплектации для функционального подхода с максимальной стоимостью", max_cost)
for combo in filtered_complectacii:
    print(combo, "Стоимость:", calculate_cost(combo, prices))

