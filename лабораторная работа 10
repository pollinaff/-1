"""
Требуется написать игру Крестики-Нолики с использованием граафической библиотекки tkinter.
"""

import tkinter as tk
from tkinter import messagebox

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Крестики-нолики")
        self.board = [' ' for _ in range(9)]
        self.current_player = "X"
        self.mode = "PvP"  # PvP - Player vs Player, PvC - Player vs Computer

        self.create_widgets()

    def create_widgets(self):
        self.buttons = []
        for i in range(9):
            button = tk.Button(self.root, text=' ', font=('normal', 40), width=5, height=2,
                               command=lambda i=i: self.on_button_click(i))
            button.grid(row=i//3, column=i%3)
            self.buttons.append(button)

        self.reset_button = tk.Button(self.root, text="Сброс", command=self.reset_game)
        self.reset_button.grid(row=3, column=0, columnspan=3, sticky="nsew")

        self.mode_button = tk.Button(self.root, text="Выбрать режим", command=self.toggle_mode)
        self.mode_button.grid(row=4, column=0, columnspan=3, sticky="nsew")

    def on_button_click(self, index):
        if self.board[index] == ' ':
            self.board[index] = self.current_player
            self.buttons[index].config(text=self.current_player)
            if self.check_winner(self.current_player):
                messagebox.showinfo("Игра окончена", f"Игрок {self.current_player} выиграл!")
                self.reset_game()
            elif ' ' not in self.board:
                messagebox.showinfo("Игра окончена", "Ничья!")
                self.reset_game()
            else:
                self.current_player = "O" if self.current_player == "X" else "X"
                if self.mode == "PvC" and self.current_player == "O":
                    self.computer_move()

    def computer_move(self):
        best_score = float('-inf')
        best_move = None
        for i in range(9):
            if self.board[i] == ' ':
                self.board[i] = 'O'
                score = self.minimax(self.board, 0, False)
                self.board[i] = ' '
                if score > best_score:
                    best_score = score
                    best_move = i
        self.on_button_click(best_move)

    def minimax(self, board, depth, is_maximizing):
        if self.check_winner('O'):
            return 1
        elif self.check_winner('X'):
            return -1
        elif ' ' not in board:
            return 0

        if is_maximizing:
            best_score = float('-inf')
            for i in range(9):
                if board[i] == ' ':
                    board[i] = 'O'
                    score = self.minimax(board, depth + 1, False)
                    board[i] = ' '
                    best_score = max(score, best_score)
            return best_score
        else:
            best_score = float('inf')
            for i in range(9):
                if board[i] == ' ':
                    board[i] = 'X'
                    score = self.minimax(board, depth + 1, True)
                    board[i] = ' '
                    best_score = min(score, best_score)
            return best_score

    def check_winner(self, player):
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # горизонтальные линии
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # вертикальные линии
            [0, 4, 8], [2, 4, 6]              # диагональные линии
        ]
        for combo in winning_combinations:
            if all(self.board[i] == player for i in combo):
                return True
        return False

    def reset_game(self):
        self.board = [' ' for _ in range(9)]
        self.current_player = "X"
        for button in self.buttons:
            button.config(text=' ')

    def toggle_mode(self):
        if self.mode == "PvP":
            self.mode = "PvC"
            self.mode_button.config(text="Режим: игра против компьютера")
        else:
            self.mode = "PvP"
            self.mode_button.config(text="Режим: игра против пользователя")
        self.reset_game()

if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
