"""
Требуется написать объектно-ориентированную программу с графическим интерфейсом в соответствии со своим вариантом.
В программе должны быть реализованы минимум один класс, три атрибута, четыре метода (функции).
Ввод данных из файла с контролем правильности ввода.
Базы данных использовать нельзя. При необходимости сохранять информацию в виде файлов, разделяя значения запятыми или пробелами.
Для GUI использовать библиотеку tkinter.

Вариант - 28

Объекты:
    + звезды
Функции:
    + сегментация
    + визуализация
    + раскраска
    + перемещение на плоскости
"""

import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog, colorchooser
import random

class Star:
    def __init__(self, name, x, y, color="white"):
        self.name = name
        self.x = x
        self.y = y
        self.color = color

    def move(self, dx, dy):
        self.x += dx
        self.y += dy

    def change_color(self, new_color):
        self.color = new_color

    def visualize(self, canvas):
        canvas.create_oval(self.x-5, self.y-5, self.x+5, self.y+5, fill=self.color)
        canvas.create_text(self.x, self.y-10, text=self.name, fill="white")

    """
    Метод для визуализации звезды с учетом сегментации по цвету
    """
    def segment_by_color(self, canvas, color):
        if self.color == color:
            self.visualize(canvas)

class StarApp:
    def __init__(self, master):
        """
        Флаг для активации режима перемещения звезд
        """
        self.move_mode = False
        """
        Новый флаг для режима изменения цвета
        """
        self.change_color_mode = False  
        self.root = master
        self.root.title("Star System")
        self.stars = []
        """
        Флаг для перемещения звезды
        """
        self.moving_star = None  
        self.canvas = tk.Canvas(self.root, width=500, height=500, bg="black")
        self.canvas.pack()
        self.setup_ui()
        """
        Привязываем обработчики событий мыши после создания холста
        """
        self.canvas.bind("<Button-1>", self.on_mouse_down)
        self.canvas.bind("<B1-Motion>", self.on_mouse_move)
        self.canvas.bind("<ButtonRelease-1>", self.on_mouse_up)
        """
        Привязываем обработчик события двойного клика
        """
        self.canvas.bind("<Double-1>", self.on_double_click)

    def redraw_stars(self):
        self.canvas.delete("all")
        for star in self.stars:
            star.visualize(self.canvas)
    def toggle_move_stars(self):
        self.move_mode = not self.move_mode
        self.canvas.config(cursor="hand1" if self.move_mode else "")
        if self.moving_star is None:
            self.moving_star = True
            self.canvas.config(cursor="hand1")
        else:
            self.moving_star = None
            self.canvas.config(cursor="")

    def on_mouse_down(self, event):
        if self.moving_star:
            for star in self.stars:
                if star.x - 5 < event.x < star.x + 5 and star.y - 5 < event.y < star.y + 5:
                    self.moving_star = star
                    return
        if self.move_mode:
            for star in self.stars:
                if star.x - 5 < event.x < star.x + 5 and star.y - 5 < event.y < star.y + 5:
                    self.moving_star = star
                    return

    def on_mouse_move(self, event):
        if self.moving_star:
            """
            Теперь перемещаем только выбранную звезду
            """
            dx = event.x - self.moving_star.x
            dy = event.y - self.moving_star.y
            self.moving_star.move(dx, dy)
            self.redraw_stars()

    def on_mouse_up(self, event):
        self.moving_star = None

    def setup_ui(self):
        tk.Button(self.root, text="Загрузить данные", command=self.load_data).pack()
        tk.Button(self.root, text="Переместить звезду", command=self.toggle_move_stars).pack()
        tk.Button(self.root, text="Изменить цвет звезды", command=self.change_star_color).pack()
        tk.Button(self.root, text="Сегментировать по цвету", command=self.segment_by_color_dialog).pack()
        tk.Button(self.root, text="Назад", command=self.restore_stars).pack()

    def segment_by_color_dialog(self):
        """
        Создание диалогового окна для выбора цвета
        """
        self.color_window = tk.Toplevel(self.root)
        self.color_window.title("Выбор цвета")

        """
        Получение уникальных цветов звёзд
        """
        unique_colors = list({star.color for star in self.stars})

        """
        Создание фрейма для палитры цветов
        """
        self.palette_frame = tk.Frame(self.color_window)
        self.palette_frame.pack()

        """
        Создание квадратов цвета для палитры
        """
        for color in unique_colors:
            color_square = tk.Canvas(self.palette_frame, width=20, height=20, bg=color)
            color_square.pack(side=tk.LEFT, padx=5, pady=5)
            color_square.bind('<Button-1>', lambda e, col=color: self.segment_stars(col))

    def load_data(self):
        file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if not file_path:
            return
        with open(file_path, 'r') as file:
            self.stars = []
            self.canvas.delete("all")
            for line in file:
                parts = line.strip().split(',')
                if len(parts) == 4 and all(part.isalnum() or part.replace('.', '', 1).isdigit() for part in parts[1:3]):
                    name, x, y, color = parts
                    star = Star(name, float(x), float(y), color)
                    self.stars.append(star)
                    star.visualize(self.canvas)
                else:
                    messagebox.showerror("Ошибка", "Некорректный формат данных в файле.")
                    self.stars = []
                    self.canvas.delete("all")
                    return

    def segment_stars(self, color):
        """
        Сегментация звёзд по выбранному цвету
        """
        self.canvas.delete("all")
        for star in self.stars:
            star.segment_by_color(self.canvas, color)

        """
        Закрытие диалогового окна после выбора
        """
        self.color_window.destroy()

    def restore_stars(self):
        """
        Выключаем режим перемещения
        """
        self.move_mode = False
        """
        Dыключаем режим изменения цвета
        """
        self.change_color_mode = False
        """
        Возвращаем курсор к стандартному виду
        """
        self.canvas.config(cursor="")  
        """
        Перерисовываем звёзды
        """
        self.redraw_stars()  
        """
        Очищаем холст
        """
        self.canvas.delete("all")  
        for star in self.stars:
            star.visualize(self.canvas)

    def move_stars(self):
        dx = random.randint(-20, 20)
        dy = random.randint(-20, 20)
        self.canvas.delete("all")
        for star in self.stars:
            star.move(dx, dy)
            star.visualize(self.canvas)

    def change_star_color(self):
        self.change_color_mode = not self.change_color_mode
        """
        Изменяем курсор, чтобы показать активный режим изменения цвета
        """
        self.canvas.config(cursor="cross" if self.change_color_mode else "")

    def on_double_click(self, event):
        """
        Обработчик двойного клика для изменения цвета звезды
        """
        if self.change_color_mode:
            for star in self.stars:
                if star.x - 5 < event.x < star.x + 5 and star.y - 5 < event.y < star.y + 5:
                    """
                    Открываем диалог выбора цвета
                    """
                    color = colorchooser.askcolor(title="Выберите цвет звезды")[1]
                    if color:
                        star.change_color(color)
                        self.redraw_stars()
                    break


    @staticmethod
    def is_valid_color(color):
        if color.startswith('#') and len(color) == 7:
            try:
                int(color[1:], 16)
                return True
            except ValueError:
                return False
        return color in ['white', 'black', 'red', 'green', 'blue', 'cyan', 'yellow', 'magenta']

if __name__ == "__main__":
    root = tk.Tk()
    app = StarApp(root)
    root.mainloop()
